id: fec_dev_rep_encoder
label: Repetition Encoder Definition
flags: [show_id]
category: '[Error Coding]'

templates:
  imports: from gnuradio import fec_dev
  var_make: |-
    % if int(ndim)==0:
    self.${id} = ${id} = fec_dev.bch_encoder_make(${framebits, repetitions})\
    % elif int(ndim)==1:
    self.${id} = ${id} = list(map((lambda a:fec_dev.bch_encoder_make(${framebits, repetitions})),\
    range(0,${dim1})))
    % else:
    self.${id} = ${id} = list(map((lambda b:list(map((lambda a: \
    fec_dev.bch_encoder_make(${framebits, repetitions})),\
    range(0,${dim2})))), range(0,${dim1})))
    % endif

parameters:
- id: ndim
  label: Parallelism
  dtype: enum
  default: '0'
  options: ['0', '1', '2']
- id: dim1
  label: Dimension 1
  dtype: int
  default: '1'
  hide: ${ ('none' if (int(ndim) >= 1) else 'all') }
- id: dim2
  label: Dimension 2
  dtype: int
  default: '1'
  hide: ${ ('none' if (int(ndim) >= 2) else 'all') }
- id: framebits
  label: Frame Bits
  dtype: int
  default: '2048'
- id: repetitions
  label: Repetitions
  dtype: int
  default: '3'
value: ${ fec_dev.bch_encoder.make(framebits, repetitions) }
