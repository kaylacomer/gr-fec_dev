id: fec_dev_bch_decoder
label: BCH Decoder Definition
category: '[fec_dev]'
flags: [show_id]

templates:
  imports: from gnuradio import fec_dev
  var_make: |-
    % if int(ndim)==0:
    self.${id} = ${id} = fec_dev.bch_decoder_make(${codeword, t})\
    % elif int(ndim)==1:
    self.${id} = ${id} = list(map((lambda a:fec_dev.bch_decoder_make(${codeword, t})),\
    range(0,${dim1})))
    % else:
    self.${id} = ${id} = list(map((lambda b:list(map((lambda a: \
    fec_dev.bch_decoder_make(${codeword, t})),\
    range(0,${dim2})))), range(0,${dim1})))
    % endif

parameters:
- id: ndim
  label: Parallelism
  dtype: enum
  default: '0'
  options: ['0', '1', '2']
- id: dim1
  label: Dimension 1
  dtype: int
  default: '1'
  hide: ${ ('none' if (int(ndim) >= 1) else 'all') }
- id: dim2
  label: Dimension 2
  dtype: int
  default: '1'
  hide: ${ ('none' if (int(ndim) >= 2) else 'all') }
- id: codeword
  label: Number of Encoded Bits
  dtype: int
  default: '127'
- id: t
  label: Correction power
  dtype: int
  default: '5'
value: ${ fec_dev.bch_decoder.make(codeword, t) }


file_format: 1
