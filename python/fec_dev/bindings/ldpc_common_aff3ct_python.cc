/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ldpc_common_aff3ct.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(9ea25053857d9e9f6db1978e9894629b)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/fec_dev/ldpc_common_aff3ct.h>
// pydoc.h is automatically generated in the build directory
// #include <ldpc_common_aff3ct_pydoc.h>

void bind_ldpc_common_aff3ct(py::module& m)
{


    py::module m_LDPC = m.def_submodule("LDPC");


    py::enum_<::gr::fec_dev::LDPC::_encoder_t>(m_LDPC, "_encoder_t")
        .value("LDPC", ::gr::fec_dev::LDPC::_encoder_t::LDPC)             // 0
        .value("LDPC_H", ::gr::fec_dev::LDPC::_encoder_t::LDPC_H)         // 1
        .value("LDPC_DVBS2", ::gr::fec_dev::LDPC::_encoder_t::LDPC_DVBS2) // 2
        .value("LDPC_IRA", ::gr::fec_dev::LDPC::_encoder_t::LDPC_IRA)     // 3
        .value("LDPC_QC", ::gr::fec_dev::LDPC::_encoder_t::LDPC_QC)       // 4
        .export_values();

    py::implicitly_convertible<int, ::gr::fec_dev::LDPC::_encoder_t>();
    py::enum_<::gr::fec_dev::LDPC::_enc_gen_matrix_method_t>(m_LDPC,
                                                             "_enc_gen_matrix_method_t")
        .value("IDENTITY", ::gr::fec_dev::LDPC::_enc_gen_matrix_method_t::IDENTITY) // 0
        .value("LU_DEC", ::gr::fec_dev::LDPC::_enc_gen_matrix_method_t::LU_DEC)     // 1
        .export_values();

    py::implicitly_convertible<int, ::gr::fec_dev::LDPC::_enc_gen_matrix_method_t>();
    py::enum_<::gr::fec_dev::LDPC::_decoder_t>(m_LDPC, "_decoder_t")
        .value("BIT_FLIPPING", ::gr::fec_dev::LDPC::_decoder_t::BIT_FLIPPING)     // 0
        .value("BP_PEELING", ::gr::fec_dev::LDPC::_decoder_t::BP_PEELING)         // 1
        .value("BP_FLOODING", ::gr::fec_dev::LDPC::_decoder_t::BP_FLOODING)       // 2
        .value("BP_HORIZ_LAYER", ::gr::fec_dev::LDPC::_decoder_t::BP_HORIZ_LAYER) // 3
        .value("BP_VERT_LAYER", ::gr::fec_dev::LDPC::_decoder_t::BP_VERT_LAYER)   // 4
        .export_values();

    py::implicitly_convertible<int, ::gr::fec_dev::LDPC::_decoder_t>();
    py::enum_<::gr::fec_dev::LDPC::_dec_impl_t>(m_LDPC, "_dec_impl_t")
        .value("STD", ::gr::fec_dev::LDPC::_dec_impl_t::STD)   // 0
        .value("GALA", ::gr::fec_dev::LDPC::_dec_impl_t::GALA) // 1
        .value("GALB", ::gr::fec_dev::LDPC::_dec_impl_t::GALB) // 2
        .value("GALE", ::gr::fec_dev::LDPC::_dec_impl_t::GALE) // 3
        .value("PPBF", ::gr::fec_dev::LDPC::_dec_impl_t::PPBF) // 4
        .value("WBF", ::gr::fec_dev::LDPC::_dec_impl_t::WBF)   // 5
        .value("MWBF", ::gr::fec_dev::LDPC::_dec_impl_t::MWBF) // 6
        .value("SPA", ::gr::fec_dev::LDPC::_dec_impl_t::SPA)   // 7
        .value("LSPA", ::gr::fec_dev::LDPC::_dec_impl_t::LSPA) // 8
        .value("AMS", ::gr::fec_dev::LDPC::_dec_impl_t::AMS)   // 9
        .value("MS", ::gr::fec_dev::LDPC::_dec_impl_t::MS)     // 10
        .value("NMS", ::gr::fec_dev::LDPC::_dec_impl_t::NMS)   // 11
        .value("OMS", ::gr::fec_dev::LDPC::_dec_impl_t::OMS)   // 12
        .export_values();

    py::implicitly_convertible<int, ::gr::fec_dev::LDPC::_dec_impl_t>();
    py::enum_<::gr::fec_dev::LDPC::_dec_H_reorder_t>(m_LDPC, "_dec_H_reorder_t")
        .value("ASC", ::gr::fec_dev::LDPC::_dec_H_reorder_t::ASC)   // 0
        .value("DSC", ::gr::fec_dev::LDPC::_dec_H_reorder_t::DSC)   // 1
        .value("NONE", ::gr::fec_dev::LDPC::_dec_H_reorder_t::NONE) // 2
        .export_values();

    py::implicitly_convertible<int, ::gr::fec_dev::LDPC::_dec_H_reorder_t>();
    py::enum_<::gr::fec_dev::LDPC::_dec_min_AMS_t>(m_LDPC, "_dec_min_AMS_t")
        .value("MINS", ::gr::fec_dev::LDPC::_dec_min_AMS_t::MINS) // 0
        .value("MINL", ::gr::fec_dev::LDPC::_dec_min_AMS_t::MINL) // 1
        .value("MIN", ::gr::fec_dev::LDPC::_dec_min_AMS_t::MIN)   // 2
        .export_values();

    py::implicitly_convertible<int, ::gr::fec_dev::LDPC::_dec_min_AMS_t>();
}
