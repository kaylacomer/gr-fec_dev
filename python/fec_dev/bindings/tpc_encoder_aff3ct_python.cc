/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(tpc_encoder_aff3ct.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(b01c680c8756ca51a94e3eecf91357b6)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/fec_dev/tpc_encoder_aff3ct.h>
// pydoc.h is automatically generated in the build directory
#include <tpc_encoder_aff3ct_pydoc.h>

void bind_tpc_encoder_aff3ct(py::module& m)
{
    using tpc_encoder_aff3ct = ::gr::fec_dev::tpc_encoder_aff3ct;


    py::class_<tpc_encoder_aff3ct, gr::fec::generic_encoder,
        std::shared_ptr<tpc_encoder_aff3ct>>(m, "tpc_encoder_aff3ct", D(tpc_encoder_aff3ct))

        .def_static("make", &tpc_encoder_aff3ct::make,
           py::arg("K_sqrt"),
           py::arg("N_sqrt"),
           py::arg("t"),
           py::arg("bch_simd_strat") = ::gr::fec_dev::SIMD::_simd_strat_t::SEQ,
           py::arg("interleaver") = ::gr::fec_dev::Interleaver::_interleaver_t::ROW_COL,
           py::arg("read_order") = ::gr::fec_dev::Interleaver::_itl_read_order_t::TOP_LEFT,
           py::arg("parity_extended") = false,
           D(tpc_encoder_aff3ct,make)
        )

        .def("set_frame_size",
            &tpc_encoder_aff3ct::set_frame_size,
            py::arg("frame_size"),
            D(tpc_encoder_aff3ct, set_frame_size))

        .def("rate", &tpc_encoder_aff3ct::rate, D(tpc_encoder_aff3ct, rate))

        ;
}








