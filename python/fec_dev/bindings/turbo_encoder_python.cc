/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(turbo_encoder.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(d69994dfe415ab7f12d80cec35589927)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/numpy.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/fec_dev/turbo_encoder.h>
// pydoc.h is automatically generated in the build directory
#include <turbo_encoder_pydoc.h>

void bind_turbo_encoder(py::module& m)
{

    using turbo_encoder = ::gr::fec_dev::turbo_encoder;


    py::class_<turbo_encoder, gr::fec::generic_encoder, std::shared_ptr<turbo_encoder>>(
        m, "turbo_encoder", D(turbo_encoder))

        .def_static("make",
             &turbo_encoder::make,
             py::arg("frame_size"),
             py::arg("standard") = ::gr::fec_dev::Turbo::_enc_standard_t::LTE,
             py::arg("buffered") = true,
             py::arg("polys") = std::vector<int>{013, 015},
             py::arg("trellis_size") = 8,
             py::arg("subenc_impl") = ::gr::fec_dev::Turbo::_subenc_implem_t::sys,
             py::arg("n_ff") = -1,
             py::arg("interleaver") = ::gr::fec_dev::Interleaver::_interleaver_t::NO,
             py::arg("read_order") = ::gr::fec_dev::Interleaver::_itl_read_order_t::NA,
             py::arg("itl_n_cols") = -1,
             D(turbo_encoder, make))

        .def("set_frame_size",
             &turbo_encoder::set_frame_size,
             py::arg("frame_size"),
             D(turbo_encoder, set_frame_size))


        .def("rate", &turbo_encoder::rate, D(turbo_encoder, rate))
        ;
}
